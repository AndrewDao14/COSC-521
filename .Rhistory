# plot(1,1,type = "n",
#      xlab = "X Coordinate", ylab = "Y Coordinate",
#      main = paste("Plot ", turn.num),
#      pch = 16,  # Use solid circles for the points
#      col = "blue",  # Color of the points
#      xlim = c(0, 5000), ylim = c(0, 5000),# Set limits for x and y axes
#      asp = 1)
#plot obstacles
symbols(obstacles$x[1], obstacles$y[1], circles = obstacles$r[1], inches = FALSE, add = TRUE,
fg = "red", bg = NA, lwd = 2)  # Add a circle at (2, 2) with radius 1
#Only uncomment this second line if there is a second obstacle
# symbols(obstacles$x[2], obstacles$y[2], circles = obstacles$r[2], inches = FALSE, add = TRUE,
#         fg = "red", bg = NA, lwd = 2)  # Add a circle at (2, 2) with radius 1
text(nodes$x, nodes$y, labels = nodes$name, pos = 4, col = "red", cex = 1.2)
#This is the shortest longest path
#optimal.path(graph.object,1,node.count, hops = 2)
d_sd <- calculate_distance(nodes$x[1], nodes$y[1], nodes$x[node.count], nodes$y[node.count])
optimal_path <- optimal.path.op(graph.object,1,node.count, hops = 2, d_sd = d_sd)
print(optimal_path)
paths <- all.available.paths(graph.object,1,node.count, hops = 2)
print(paths)
if (length(paths) > 0){
row.data <- data.frame(matrix(nrow = number.of.hops, ncol = 0))
path.row.data <- data.frame(matrix(nrow = 1, ncol = 0))
for (path in paths){
edge.dist.table <- edge.distance(list(path), nodes, obstacles)
row.data <- cbind(row.data, edge.dist.table)
path.row.data <- cbind(path.row.data, as.data.frame(t(path))) #Have to transpose path
}
#edge.dist.table <- edge.distance(paths[1], nodes, obstacles)
remaining.col <- number.of.hops*choose(relay.count, number.of.hops-1) - ncol(row.data)
row.data[paste0(1:remaining.col)] <- NA
colnames(row.data) <- seq_len(ncol(row.data))
#same thing but for path
path.remaining.col <- 3*relay.count - ncol(path.row.data)
path.row.data[paste0(1:path.remaining.col)] <- NA
colnames(path.row.data) <- seq_len(ncol(path.row.data))
#Bind rows
edge.data <- rbind(edge.data, row.data)
path.data <- rbind(path.data, path.row.data)
#Bind rows for best edge data
edge.dist.table.op <- edge.distance(list(optimal_path), nodes, obstacles)
edge.data.op <- rbind(edge.data.op,edge.dist.table.op)
path.data.op <- rbind(path.data.op,optimal_path)
} else{
print("No Available paths")
}
}
plot(graph.object)
plot(graph.object,
vertex.color = "skyblue",
vertex.size = 30,
vertex.label.color = "black",
edge.color = "grey",
main = "Graph Visualization")
library(igraph)
library(openxlsx)
source("function.R")
node.count = 10
obstacles <- data.frame(# all obstacles are round for now
name = c(1),
x = c(2500), #x coordinates
y = c(2500), #y coordinates
r = c(1000) #radius
)
#empty data frame to save the data
relay.count <- node.count - 2
edge.data <- data.frame(matrix(nrow = 0, ncol = number.of.hops*choose(relay.count, number.of.hops-1)))
colnames(edge.data) <- seq_len(ncol(edge.data))
#edge data for optimal path
path.data.op <- data.frame()
#path data for all path
path.data <- data.frame(matrix(nrow = 0, ncol = 3*(relay.count - 2)))
colnames(path.data) <- seq_len(ncol(path.data))
#path data for all path
for (turn.num in 1:1){
print(sprintf("Turn num %d", turn.num))
set.seed(25)
# Initialize nodes data frame
nodes <- data.frame(name = 1:node.count, x = NA, y = NA)
# Generate each node's coordinates
for (i in 1:node.count) {
repeat {
# Generate random coordinates
x <- ifelse(i == 1 || i == node.count, (i - 1)*1000, runif(1, min = 0, max = 5000))
y <- ifelse(i == 1 || i == node.count, (i - 1)*1000, runif(1, min = 0, max = 5000))
# Check if the point is outside the circle
if (!is_within_circle(x, y, c(obstacles$x[1], obstacles$y[1]), obstacles$r[1])) {
nodes$x[i] <- x
nodes$y[i] <- y
break
}
}
nodes$x[node.count] = 5000
nodes$y[node.count] = 5000
}
d_matrix <- dist.matrix.from.field(nodes, obstacles)
graph.object <- graph_from_adjacency_matrix(d_matrix, mode = "undirected", weighted = TRUE, diag = FALSE)
#Plot the field
#plot nodes
plot(nodes$x, nodes$y,
xlab = "X Coordinate", ylab = "Y Coordinate",
main = paste("Plot ", turn.num),
pch = 16,  # Use solid circles for the points
col = "blue",  # Color of the points
xlim = c(0, 5000), ylim = c(0, 5000),# Set limits for x and y axes
asp = 1)
# plot(1,1,type = "n",
#      xlab = "X Coordinate", ylab = "Y Coordinate",
#      main = paste("Plot ", turn.num),
#      pch = 16,  # Use solid circles for the points
#      col = "blue",  # Color of the points
#      xlim = c(0, 5000), ylim = c(0, 5000),# Set limits for x and y axes
#      asp = 1)
#plot obstacles
symbols(obstacles$x[1], obstacles$y[1], circles = obstacles$r[1], inches = FALSE, add = TRUE,
fg = "red", bg = NA, lwd = 2)  # Add a circle at (2, 2) with radius 1
#Only uncomment this second line if there is a second obstacle
# symbols(obstacles$x[2], obstacles$y[2], circles = obstacles$r[2], inches = FALSE, add = TRUE,
#         fg = "red", bg = NA, lwd = 2)  # Add a circle at (2, 2) with radius 1
text(nodes$x, nodes$y, labels = nodes$name, pos = 4, col = "red", cex = 1.2)
#This is the shortest longest path
#optimal.path(graph.object,1,node.count, hops = 2)
d_sd <- calculate_distance(nodes$x[1], nodes$y[1], nodes$x[node.count], nodes$y[node.count])
optimal_path <- optimal.path.op(graph.object,1,node.count, hops = 2, d_sd = d_sd)
print(optimal_path)
paths <- all.available.paths(graph.object,1,node.count, hops = 2)
print(paths)
if (length(paths) > 0){
row.data <- data.frame(matrix(nrow = number.of.hops, ncol = 0))
path.row.data <- data.frame(matrix(nrow = 1, ncol = 0))
for (path in paths){
edge.dist.table <- edge.distance(list(path), nodes, obstacles)
row.data <- cbind(row.data, edge.dist.table)
path.row.data <- cbind(path.row.data, as.data.frame(t(path))) #Have to transpose path
}
#edge.dist.table <- edge.distance(paths[1], nodes, obstacles)
remaining.col <- number.of.hops*choose(relay.count, number.of.hops-1) - ncol(row.data)
row.data[paste0(1:remaining.col)] <- NA
colnames(row.data) <- seq_len(ncol(row.data))
#same thing but for path
path.remaining.col <- 3*relay.count - ncol(path.row.data)
path.row.data[paste0(1:path.remaining.col)] <- NA
colnames(path.row.data) <- seq_len(ncol(path.row.data))
#Bind rows
edge.data <- rbind(edge.data, row.data)
path.data <- rbind(path.data, path.row.data)
#Bind rows for best edge data
edge.dist.table.op <- edge.distance(list(optimal_path), nodes, obstacles)
edge.data.op <- rbind(edge.data.op,edge.dist.table.op)
path.data.op <- rbind(path.data.op,optimal_path)
} else{
print("No Available paths")
}
}
plot(graph.object,
vertex.color = "skyblue",
vertex.size = 20,
edge.width = E(graph.object)$weight,  # Use weights for edge thickness
main = "Graph from Adjacency Matrix")
View(d_matrix)
plot(graph.object,
vertex.color = "orange",
vertex.size = 30,
edge.width = E(graph.object)$weight,
layout = layout_with_kk,
main = "Weighted Graph")
plot(graph.object,
vertex.color = "orange",
vertex.size = 30,
edge.width = E(graph.object)$weight,
layout = layout_with_kk,
main = "Weighted Graph")
# Create a copy of the graph
graph_copy <- graph.object
# Replace infinite edge weights with 0 (or any value that represents no connection)
E(graph_copy)$weight[is.infinite(E(graph_copy)$weight)] <- 0
# Now you can safely plot the graph
plot(graph_copy,
vertex.color = "orange",
vertex.size = 30,
edge.width = E(graph_copy)$weight,
layout = layout_with_kk,
main = "Graph with Infinite Weights Replaced")
View(d_matrix)
plot(graph_copy,
vertex.color = "orange",
vertex.size = 30,
edge.width = E(graph_copy)$weight,
layout = layout_with_kk(graph_copy),
main = "Graph with Infinite Weights Replaced")
library(igraph)
# Create a copy of the graph
graph_copy <- graph.object
# Replace infinite edge weights with a small positive value (e.g., 1)
E(graph_copy)$weight[is.infinite(E(graph_copy)$weight)] <- 1
# Now you can safely use Kamada-Kawai layout and plot
plot(graph_copy,
vertex.color = "orange",
vertex.size = 30,
edge.width = E(graph_copy)$weight,
layout = layout_with_kk,
main = "Graph with Positive Edge Weights")
plot(graph_copy,
vertex.color = "orange",
vertex.size = 2,
edge.width = E(graph.object)$weight,
layout = layout_with_kk,
main = "Weighted Graph")
plot(graph_copy,
vertex.color = "orange",
vertex.size = 30,
edge.width = E(graph_copy)$weight,
layout = layout_with_kk,
main = "Graph with Positive Edge Weights")
plot(graph_copy,
vertex.color = "orange",
vertex.size = 2,
edge.width = E(graph_copy)$weight,
layout = layout_with_kk,
main = "Graph with Positive Edge Weights")
plot(graph_copy,
vertex.color = "orange",
vertex.size = 30,
edge.width = 2,
layout = layout_with_kk,
main = "Graph with Positive Edge Weights")
plot(graph_copy,
vertex.color = "orange",
vertex.size = 30,
edge.width = 2,
layout = layout_with_fr,
main = "Graph with Positive Edge Weights")
graph_copy <- delete_edges(graph.object, E(graph.object)[is.infinite(E(graph.object)$weight)])
plot(graph_copy,
vertex.color = "orange",
vertex.size = 30,
edge.width = 2,
layout = layout_with_fr,
main = "Graph with Positive Edge Weights")
plot(graph_copy,
vertex.color = "orange",
vertex.size = 30,
edge.width = 2,
layout = layout_with_kk,
main = "Graph with Positive Edge Weights")
graph_copy <- delete_edges(graph.object, E(graph.object)[is.infinite(E(graph.object)$weight)])
plot(graph_copy,
vertex.color = "orange",
vertex.size = 30,
edge.width = 2,
layout = layout_with_kk,
main = "Graph with Positive Edge Weights")
plot(graph_copy,
vertex.color = "orange",
vertex.size = 20,
edge.width = 2,
layout = layout_with_kk,
main = "Graph with Positive Edge Weights")
plot(graph_copy,
vertex.color = "orange",
vertex.size = 20,
edge.width = 2,
layout = layout_with_fr,
main = "Graph with Positive Edge Weights")
library(igraph)
library(openxlsx)
source("function.R")
set.seed(as.numeric(Sys.time()))
node.count = 10
obstacles <- data.frame(# all obstacles are round for now
name = c(1,2),
x = c(2500,5000), #x coordinates
y = c(2500, 0), #y coordinates
r = c(1000, 1000) #radius
)
# Initialize nodes data frame
nodes <- data.frame(name = 1:node.count, x = NA, y = NA)
# Generate each node's coordinates
for (i in 1:node.count) {
repeat {
# Generate random coordinates
x <- ifelse(i == 1 || i == node.count, (i - 1)*1000, runif(1, min = 0, max = 5000))
y <- ifelse(i == 1 || i == node.count, (i - 1)*1000, runif(1, min = 0, max = 5000))
# Check if the point is outside the circle
if (!is_within_circle(x, y, c(obstacles$x[1], obstacles$y[1]), obstacles$r[1])) {
nodes$x[i] <- x
nodes$y[i] <- y
break
}
}
nodes$x[node.count] = 5000
nodes$y[node.count] = 5000
}
d_matrix <- dist.matrix.from.field(nodes, obstacles)
graph.object <- graph_from_adjacency_matrix(d_matrix, mode = "undirected", weighted = TRUE, diag = FALSE)
#Plot the field
#plot nodes
plot(nodes$x, nodes$y,
xlab = "X Coordinate", ylab = "Y Coordinate",
main = "Scatter Plot of 6 Nodes",
pch = 16,  # Use solid circles for the points
col = "blue",  # Color of the points
xlim = c(0, 5000), ylim = c(0, 5000),# Set limits for x and y axes
asp = 1)
#plot obstacles
symbols(obstacles$x[1], obstacles$y[1], circles = obstacles$r[1], inches = FALSE, add = TRUE,
fg = "red", bg = NA, lwd = 2)  # Add a circle at (2, 2) with radius 1
symbols(obstacles$x[2], obstacles$y[2], circles = obstacles$r[2], inches = FALSE, add = TRUE,
fg = "red", bg = NA, lwd = 2)  # Add a circle at (2, 2) with radius 1
text(nodes$x, nodes$y, labels = nodes$name, pos = 4, col = "red", cex = 1.2)
optimal.path(graph.object,1,node.count, hops = 2)
d_sd <- calculate_distance(nodes$x[1], nodes$y[1], nodes$x[node.count], nodes$y[node.count])
optimal.path.op(graph.object,1,node.count, hops = 2, d_sd = d_sd)
paths <- all.available.paths(graph.object,1,node.count, hops = 2)
paths
edge.dist.table <- edge.distance(paths[1], nodes, obstacles)
#Some excel experiment
work.book <- createWorkbook()
addWorksheet(work.book, "1-2,2,OPO")
writeData(work.book, sheet = "1-2,2,OPO", edge.data)
saveWorkbook(work.book, "Data_collect.xlsx", overwrite = TRUE)
plot(graph_copy,
vertex.color = "orange",
vertex.size = 2,
edge.width = E(graph.object)$weight,
layout = layout_with_kk,
main = "Weighted Graph")
library(igraph)
library(openxlsx)
source("function.R")
node.count = 10
obstacles <- data.frame(# all obstacles are round for now
name = c(1),
x = c(2500), #x coordinates
y = c(2500), #y coordinates
r = c(1000) #radius
)
#empty data frame to save the data
relay.count <- node.count - 2
edge.data <- data.frame(matrix(nrow = 0, ncol = number.of.hops*choose(relay.count, number.of.hops-1)))
colnames(edge.data) <- seq_len(ncol(edge.data))
#edge data for optimal path
path.data.op <- data.frame()
#path data for all path
path.data <- data.frame(matrix(nrow = 0, ncol = 3*(relay.count - 2)))
colnames(path.data) <- seq_len(ncol(path.data))
#path data for all path
for (turn.num in 1:25){
print(sprintf("Turn num %d", turn.num))
set.seed(turn.num)
# Initialize nodes data frame
nodes <- data.frame(name = 1:node.count, x = NA, y = NA)
# Generate each node's coordinates
for (i in 1:node.count) {
repeat {
# Generate random coordinates
x <- ifelse(i == 1 || i == node.count, (i - 1)*1000, runif(1, min = 0, max = 5000))
y <- ifelse(i == 1 || i == node.count, (i - 1)*1000, runif(1, min = 0, max = 5000))
# Check if the point is outside the circle
if (!is_within_circle(x, y, c(obstacles$x[1], obstacles$y[1]), obstacles$r[1])) {
nodes$x[i] <- x
nodes$y[i] <- y
break
}
}
nodes$x[node.count] = 5000
nodes$y[node.count] = 5000
}
d_matrix <- dist.matrix.from.field(nodes, obstacles)
graph.object <- graph_from_adjacency_matrix(d_matrix, mode = "undirected", weighted = TRUE, diag = FALSE)
#Plot the field
#plot nodes
plot(nodes$x, nodes$y,
xlab = "X Coordinate", ylab = "Y Coordinate",
main = paste("Plot ", turn.num),
pch = 16,  # Use solid circles for the points
col = "blue",  # Color of the points
xlim = c(0, 5000), ylim = c(0, 5000),# Set limits for x and y axes
asp = 1)
#plot obstacles
symbols(obstacles$x[1], obstacles$y[1], circles = obstacles$r[1], inches = FALSE, add = TRUE,
fg = "red", bg = NA, lwd = 2)  # Add a circle at (2, 2) with radius 1
#Only uncomment this second line if there is a second obstacle
# symbols(obstacles$x[2], obstacles$y[2], circles = obstacles$r[2], inches = FALSE, add = TRUE,
#         fg = "red", bg = NA, lwd = 2)  # Add a circle at (2, 2) with radius 1
text(nodes$x, nodes$y, labels = nodes$name, pos = 4, col = "red", cex = 1.2)
#This is the shortest longest path
#optimal.path(graph.object,1,node.count, hops = 2)
d_sd <- calculate_distance(nodes$x[1], nodes$y[1], nodes$x[node.count], nodes$y[node.count])
optimal_path <- optimal.path.op(graph.object,1,node.count, hops = 2, d_sd = d_sd)
print(optimal_path)
paths <- all.available.paths(graph.object,1,node.count, hops = 2)
print(paths)
if (length(paths) > 0){
row.data <- data.frame(matrix(nrow = number.of.hops, ncol = 0))
path.row.data <- data.frame(matrix(nrow = 1, ncol = 0))
for (path in paths){
edge.dist.table <- edge.distance(list(path), nodes, obstacles)
row.data <- cbind(row.data, edge.dist.table)
path.row.data <- cbind(path.row.data, as.data.frame(t(path))) #Have to transpose path
}
#edge.dist.table <- edge.distance(paths[1], nodes, obstacles)
remaining.col <- number.of.hops*choose(relay.count, number.of.hops-1) - ncol(row.data)
row.data[paste0(1:remaining.col)] <- NA
colnames(row.data) <- seq_len(ncol(row.data))
#same thing but for path
path.remaining.col <- 3*relay.count - ncol(path.row.data)
path.row.data[paste0(1:path.remaining.col)] <- NA
colnames(path.row.data) <- seq_len(ncol(path.row.data))
#Bind rows
edge.data <- rbind(edge.data, row.data)
path.data <- rbind(path.data, path.row.data)
#Bind rows for best edge data
edge.dist.table.op <- edge.distance(list(optimal_path), nodes, obstacles)
edge.data.op <- rbind(edge.data.op,edge.dist.table.op)
path.data.op <- rbind(path.data.op,optimal_path)
} else{
print("No Available paths")
}
}
source("function.R")
node.count = 10
obstacles <- data.frame(# all obstacles are round for now
name = c(1),
x = c(2500), #x coordinates
y = c(2500), #y coordinates
r = c(1000) #radius
)
#empty data frame to save the data
relay.count <- node.count - 2
edge.data <- data.frame(matrix(nrow = 0, ncol = number.of.hops*choose(relay.count, number.of.hops-1)))
colnames(edge.data) <- seq_len(ncol(edge.data))
#edge data for optimal path
path.data.op <- data.frame()
#path data for all path
path.data <- data.frame(matrix(nrow = 0, ncol = 3*(relay.count - 2)))
colnames(path.data) <- seq_len(ncol(path.data))
#path data for all path
for (turn.num in 1:25){
print(sprintf("Turn num %d", turn.num))
set.seed(turn.num)
# Initialize nodes data frame
nodes <- data.frame(name = 1:node.count, x = NA, y = NA)
# Generate each node's coordinates
for (i in 1:node.count) {
repeat {
# Generate random coordinates
x <- ifelse(i == 1 || i == node.count, (i - 1)*1000, runif(1, min = 0, max = 5000))
y <- ifelse(i == 1 || i == node.count, (i - 1)*1000, runif(1, min = 0, max = 5000))
# Check if the point is outside the circle
if (!is_within_circle(x, y, c(obstacles$x[1], obstacles$y[1]), obstacles$r[1])) {
nodes$x[i] <- x
nodes$y[i] <- y
break
}
}
nodes$x[node.count] = 5000
nodes$y[node.count] = 5000
}
d_matrix <- dist.matrix.from.field(nodes, obstacles)
graph.object <- graph_from_adjacency_matrix(d_matrix, mode = "undirected", weighted = TRUE, diag = FALSE)
#Plot the field
#plot nodes
plot(nodes$x, nodes$y,
xlab = "X Coordinate", ylab = "Y Coordinate",
main = paste("Plot ", turn.num),
pch = 16,  # Use solid circles for the points
col = "blue",  # Color of the points
xlim = c(0, 5000), ylim = c(0, 5000),# Set limits for x and y axes
asp = 1)
#plot obstacles
symbols(obstacles$x[1], obstacles$y[1], circles = obstacles$r[1], inches = FALSE, add = TRUE,
fg = "red", bg = NA, lwd = 2)  # Add a circle at (2, 2) with radius 1
#Only uncomment this second line if there is a second obstacle
# symbols(obstacles$x[2], obstacles$y[2], circles = obstacles$r[2], inches = FALSE, add = TRUE,
#         fg = "red", bg = NA, lwd = 2)  # Add a circle at (2, 2) with radius 1
text(nodes$x, nodes$y, labels = nodes$name, pos = 4, col = "red", cex = 1.2)
#This is the shortest longest path
#optimal.path(graph.object,1,node.count, hops = 2)
d_sd <- calculate_distance(nodes$x[1], nodes$y[1], nodes$x[node.count], nodes$y[node.count])
optimal_path <- optimal.path.op(graph.object,1,node.count, hops = 2, d_sd = d_sd)
print(optimal_path)
paths <- all.available.paths(graph.object,1,node.count, hops = 2)
print(paths)
if (length(paths) > 0){
row.data <- data.frame(matrix(nrow = number.of.hops, ncol = 0))
path.row.data <- data.frame(matrix(nrow = 1, ncol = 0))
for (path in paths){
edge.dist.table <- edge.distance(list(path), nodes, obstacles)
row.data <- cbind(row.data, edge.dist.table)
path.row.data <- cbind(path.row.data, as.data.frame(t(path))) #Have to transpose path
}
#edge.dist.table <- edge.distance(paths[1], nodes, obstacles)
remaining.col <- number.of.hops*choose(relay.count, number.of.hops-1) - ncol(row.data)
row.data[paste0(1:remaining.col)] <- NA
colnames(row.data) <- seq_len(ncol(row.data))
#same thing but for path
path.remaining.col <- 3*relay.count - ncol(path.row.data)
path.row.data[paste0(1:path.remaining.col)] <- NA
colnames(path.row.data) <- seq_len(ncol(path.row.data))
#Bind rows
edge.data <- rbind(edge.data, row.data)
path.data <- rbind(path.data, path.row.data)
#Bind rows for best edge data
edge.dist.table.op <- edge.distance(list(optimal_path), nodes, obstacles)
edge.data.op <- rbind(edge.data.op,edge.dist.table.op)
path.data.op <- rbind(path.data.op,optimal_path)
} else{
print("No Available paths")
}
}
